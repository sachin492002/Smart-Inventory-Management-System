# -*- coding: utf-8 -*-
"""Inventory_LR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHXZ4A8JLzH8sC7v3r_9jBS9mSLrSy5l
"""

!pip install pmdarima

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import pyplot
from pandas import DataFrame
import os

from statsmodels.tsa.stattools import adfuller
from pmdarima import auto_arima
from pandas.plotting import autocorrelation_plot

from sklearn.metrics import mean_squared_error
from math import sqrt

from statsmodels.tsa.arima.model import ARIMA

inventory_df = pd.read_csv('random_data.csv')
inventory_df['created_at'] = pd.to_datetime(inventory_df['created_at'])
df= inventory_df.set_index(['created_at'])
df = df.drop(columns=['entry_id'], axis=1)
train_df = inventory_df[:round(len(inventory_df)*0.9)]
test_df = inventory_df[round(len(inventory_df)*0.9):]

plt.figure(figsize=(12,5))
plt.title("Price Distirbution Graph")
ax = sns.distplot(df["field2"], color = 'y')

def ad_test(dataset):

    dftest = adfuller(dataset, autolag = 'AIC')

    print("1. ADF : ",dftest[0])
    print("2. P-Value : ", dftest[1])
    print("3. Num Of Lags : ", dftest[2])
    print("4. Num Of Observations Used For ADF Regression:",dftest[3])
    print("5. Critical Values :")
    for key, val in dftest[4].items():
         print("\t",key, ": ", val)


ad_test(df['field2'])

stepwise_fit = auto_arima(df['field2'], trace=True,
suppress_warnings=True)

X = df.values
size = int(len(X) * 0.9)
train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()

for t in range(len(test)):
    model = ARIMA(history, order=(3,2,1))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = output[0]
    predictions.append(yhat)
    obs = test[t]
    history.append(obs)
    print('predicted=%f, expected=%f' % (yhat, obs))

import joblib
joblib.dump(model_fit, 'arima_model.pkl')

pyplot.plot(test)
pyplot.plot(predictions, color='red')
pyplot.show()

inventory_df = pd.read_csv('random_data.csv')
inventory_df['created_at'] = pd.to_datetime(inventory_df['created_at'])
df= inventory_df.set_index(['created_at'])
df = df.drop(columns=['entry_id'], axis=1)
train_df = df[:round(len(inventory_df)*0.9)]
test_df = df[round(len(inventory_df)*0.9):]
train_df

rolling_mean = df.rolling(window=12).mean()
rolling_std = df.rolling(window=12).std()
plt.figure(figsize = (10,6))
plt.plot(df, color='cornflowerblue', label='Original')
plt.plot(rolling_mean, color='firebrick', label='Rolling Mean')
plt.plot(rolling_std, color='limegreen', label='Rolling Std')
plt.xlabel('Date', size = 12)
plt.ylabel('Monthly Beer Production', size  = 12)
plt.legend(loc = 'upper left')
plt.title('Rolling Statistics', size = 14)
plt.show()

plt.figure(figsize=(18,9))
plt.plot(df.index, df["field2"], linestyle="-")
plt.xlabel=('Dates')
plt.ylabel=('Total Production')
plt.show();

from statsmodels.tsa.statespace.sarimax import SARIMAX
arima_model = SARIMAX(train_df['field2'], order = (4,1,1), seasonal_order = (4,2,1,12))
arima_result = arima_model.fit()
arima_result.summary()

arima_pred = arima_result.predict(start = len(train_df), end = len(df)-1, typ="levels").rename("ARIMA Predictions")
arima_pred

test_df['field2'].plot(figsize = (16,5), legend=True)
arima_pred.plot(legend = True);

import joblib
joblib.dump(arima_result, 'arima_model.pkl')